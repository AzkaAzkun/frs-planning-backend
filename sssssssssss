[33mcommit f25185c1185af580e36591a7aca8659bce977285[m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mdev.daffa[m[33m, [m[1;31morigin/dev.daffa[m[33m)[m
Author: unknown <daffa.rinali@gmail.com>
Date:   Fri May 9 10:22:54 2025 +0700

    Commit fitur CRUD Course and Classes
    
    OA#     new file:   internal/entity/ms_course_entity.go

[1mdiff --git a/internal/api/controller/class_controller.go b/internal/api/controller/class_controller.go[m
[1mnew file mode 100644[m
[1mindex 0000000..d8422dc[m
[1m--- /dev/null[m
[1m+++ b/internal/api/controller/class_controller.go[m
[36m@@ -0,0 +1,109 @@[m
[32m+[m[32mpackage controller[m
[32m+[m
[32m+[m[32mimport ([m
[32m+[m	[32m"frs-planning-backend/internal/api/service"[m
[32m+[m	[32m"frs-planning-backend/internal/dto"[m
[32m+[m	[32m"github.com/gin-gonic/gin"[m
[32m+[m	[32m"net/http"[m
[32m+[m	[32m"strconv"[m
[32m+[m[32m)[m
[32m+[m
[32m+[m[32mtype ClassController interface {[m
[32m+[m	[32mCreateClass(c *gin.Context)[m
[32m+[m	[32mGetAllClasses(c *gin.Context)[m
[32m+[m	[32mGetClassByID(c *gin.Context)[m
[32m+[m	[32mUpdateClass(c *gin.Context)[m
[32m+[m	[32mDeleteClass(c *gin.Context)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mtype classController struct {[m
[32m+[m	[32mclassService service.ClassService[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc NewClassController(classService service.ClassService) ClassController {[m
[32m+[m	[32mreturn &classController{[m
[32m+[m		[32mclassService: classService,[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc (ctrl *classController) CreateClass(c *gin.Context) {[m
[32m+[m	[32mvar request dto.CreateClassRequest[m
[32m+[m	[32mif err := c.ShouldBindJSON(&request); err != nil {[m
[32m+[m		[32mc.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})[m
[32m+[m		[32mreturn[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mif err := ctrl.classService.CreateClass(&request); err != nil {[m
[32m+[m		[32mc.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})[m
[32m+[m		[32mreturn[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mc.JSON(http.StatusCreated, gin.H{"message": "Class created successfully"})[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc (ctrl *classController) GetAllClasses(c *gin.Context) {[m
[32m+[m	[32mclasses, err := ctrl.classService.GetAllClasses()[m
[32m+[m	[32mif err != nil {[m
[32m+[m		[32mc.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})[m
[32m+[m		[32mreturn[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mc.JSON(http.StatusOK, classes)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc (ctrl *classController) GetClassByID(c *gin.Context) {[m
[32m+[m	[32mid, err := strconv.ParseInt(c.Param("id"), 10, 64)[m
[32m+[m	[32mif err != nil {[m
[32m+[m		[32mc.JSON(http.StatusBadRequest, gin.H{"error": "Invalid ID format"})[m
[32m+[m		[32mreturn[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mclass, err := ctrl.classService.GetClassByID(id)[m
[32m+[m	[32mif err != nil {[m
[32m+[m		[32mc.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})[m
[32m+[m		[32mreturn[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mif class == nil {[m
[32m+[m		[32mc.JSON(http.StatusNotFound, gin.H{"error": "Class not found"})[m
[32m+[m		[32mreturn[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mc.JSON(http.StatusOK, class)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc (ctrl *classController) UpdateClass(c *gin.Context) {[m
[32m+[m	[32mid, err := strconv.ParseInt(c.Param("id"), 10, 64)[m
[32m+[m	[32mif err != nil {[m
[32m+[m		[32mc.JSON(http.StatusBadRequest, gin.H{"error": "Invalid ID format"})[m
[32m+[m		[32mreturn[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mvar request dto.UpdateClassRequest[m
[32m+[m	[32mif err := c.ShouldBindJSON(&request); err != nil {[m
[32m+[m		[32mc.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})[m
[32m+[m		[32mreturn[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mif err := ctrl.classService.UpdateClass(id, &request); err != nil {[m
[32m+[m		[32mc.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})[m
[32m+[m		[32mreturn[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mc.JSON(http.StatusOK, gin.H{"message": "Class updated successfully"})[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc (ctrl *classController) DeleteClass(c *gin.Context) {[m
[32m+[m	[32mid, err := strconv.ParseInt(c.Param("id"), 10, 64)[m
[32m+[m	[32mif err != nil {[m
[32m+[m		[32mc.JSON(http.StatusBadRequest, gin.H{"error": "Invalid ID format"})[m
[32m+[m		[32mreturn[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mif err := ctrl.classService.DeleteClass(id); err != nil {[m
[32m+[m		[32mc.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})[m
[32m+[m		[32mreturn[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mc.JSON(http.StatusOK, gin.H{"message": "Class deleted successfully"})[m
[32m+[m[32m}[m
[1mdiff --git a/internal/api/controller/course_controller.go b/internal/api/controller/course_controller.go[m
[1mnew file mode 100644[m
[1mindex 0000000..45fd2e2[m
[1m--- /dev/null[m
[1m+++ b/internal/api/controller/course_controller.go[m
[36m@@ -0,0 +1,96 @@[m
[32m+[m[32mpackage controller[m
[32m+[m
[32m+[m[32mimport ([m
[32m+[m	[32m"frs-planning-backend/internal/api/service"[m
[32m+[m	[32m"frs-planning-backend/internal/dto"[m
[32m+[m	[32m"github.com/gin-gonic/gin"[m
[32m+[m	[32m"net/http"[m
[32m+[m[32m)[m
[32m+[m
[32m+[m[32mtype CourseController interface {[m
[32m+[m	[32mCreateCourse(c *gin.Context)[m
[32m+[m	[32mGetAllCourses(c *gin.Context)[m
[32m+[m	[32mGetCourseByID(c *gin.Context)[m
[32m+[m	[32mUpdateCourse(c *gin.Context)[m
[32m+[m	[32mDeleteCourse(c *gin.Context)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mtype courseController struct {[m
[32m+[m	[32mcourseService service.CourseService[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc NewCourseController(courseService service.CourseService) CourseController {[m
[32m+[m	[32mreturn &courseController{[m
[32m+[m		[32mcourseService: courseService,[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc (ctrl *courseController) CreateCourse(c *gin.Context) {[m
[32m+[m	[32mvar request dto.CreateCourseRequest[m
[32m+[m	[32mif err := c.ShouldBindJSON(&request); err != nil {[m
[32m+[m		[32mc.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})[m
[32m+[m		[32mreturn[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mif err := ctrl.courseService.CreateCourse(&request); err != nil {[m
[32m+[m		[32mc.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})[m
[32m+[m		[32mreturn[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mc.JSON(http.StatusCreated, gin.H{"message": "Course created successfully"})[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc (ctrl *courseController) GetAllCourses(c *gin.Context) {[m
[32m+[m	[32mcourses, err := ctrl.courseService.GetAllCourses()[m
[32m+[m	[32mif err != nil {[m
[32m+[m		[32mc.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})[m
[32m+[m		[32mreturn[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mc.JSON(http.StatusOK, courses)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc (ctrl *courseController) GetCourseByID(c *gin.Context) {[m
[32m+[m	[32mid := c.Param("id")[m
[32m+[m
[32m+[m	[32mcourse, err := ctrl.courseService.GetCourseByID(id)[m
[32m+[m	[32mif err != nil {[m
[32m+[m		[32mc.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})[m
[32m+[m		[32mreturn[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mif course == nil {[m
[32m+[m		[32mc.JSON(http.StatusNotFound, gin.H{"error": "Course not found"})[m
[32m+[m		[32mreturn[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mc.JSON(http.StatusOK, course)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc (ctrl *courseController) UpdateCourse(c *gin.Context) {[m
[32m+[m	[32mid := c.Param("id")[m
[32m+[m
[32m+[m	[32mvar request dto.UpdateCourseRequest[m
[32m+[m	[32mif err := c.ShouldBindJSON(&request); err != nil {[m
[32m+[m		[32mc.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})[m
[32m+[m		[32mreturn[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mif err := ctrl.courseService.UpdateCourse(id, &request); err != nil {[m
[32m+[m		[32mc.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})[m
[32m+[m		[32mreturn[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mc.JSON(http.StatusOK, gin.H{"message": "Course updated successfully"})[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc (ctrl *courseController) DeleteCourse(c *gin.Context) {[m
[32m+[m	[32mid := c.Param("id")[m
[32m+[m
[32m+[m	[32mif err := ctrl.courseService.DeleteCourse(id); err != nil {[m
[32m+[m		[32mc.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})[m
[32m+[m		[32mreturn[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mc.JSON(http.StatusOK, gin.H{"message": "Course deleted successfully"})[m
[32m+[m[32m}[m
[1mdiff --git a/internal/api/repository/class_repository.go b/internal/api/repository/class_repository.go[m
[1mnew file mode 100644[m
[1mindex 0000000..d486884[m
[1m--- /dev/null[m
[1m+++ b/internal/api/repository/class_repository.go[m
[36m@@ -0,0 +1,63 @@[m
[32m+[m[32mpackage repository[m
[32m+[m
[32m+[m[32mimport ([m
[32m+[m	[32m"errors"[m
[32m+[m	[32m"frs-planning-backend/internal/entity"[m
[32m+[m	[32m"gorm.io/gorm"[m
[32m+[m[32m)[m
[32m+[m
[32m+[m[32mtype ClassRepository interface {[m
[32m+[m	[32mCreate(class *entity.Class) error[m
[32m+[m	[32mFindAll() ([]entity.Class, error)[m
[32m+[m	[32mFindByID(id int64) (*entity.Class, error)[m
[32m+[m	[32mUpdate(class *entity.Class) error[m
[32m+[m	[32mDelete(id int64) error[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mtype classRepository struct {[m
[32m+[m	[32mdb *gorm.DB[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc NewClassRepository(db *gorm.DB) ClassRepository {[m
[32m+[m	[32mreturn &classRepository{db: db}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc (r *classRepository) Create(class *entity.Class) error {[m
[32m+[m	[32mif err := r.db.Create(class).Error; err != nil {[m
[32m+[m		[32mreturn err[m
[32m+[m	[32m}[m
[32m+[m	[32mreturn nil[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc (r *classRepository) FindAll() ([]entity.Class, error) {[m
[32m+[m	[32mvar classes []entity.Class[m
[32m+[m	[32mif err := r.db.Find(&classes).Error; err != nil {[m
[32m+[m		[32mreturn nil, err[m
[32m+[m	[32m}[m
[32m+[m	[32mreturn classes, nil[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc (r *classRepository) FindByID(id int64) (*entity.Class, error) {[m
[32m+[m	[32mvar class entity.Class[m
[32m+[m	[32mif err := r.db.First(&class, id).Error; err != nil {[m
[32m+[m		[32mif errors.Is(err, gorm.ErrRecordNotFound) {[m
[32m+[m			[32mreturn nil, nil[m
[32m+[m		[32m}[m
[32m+[m		[32mreturn nil, err[m
[32m+[m	[32m}[m
[32m+[m	[32mreturn &class, nil[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc (r *classRepository) Update(class *entity.Class) error {[m
[32m+[m	[32mif err := r.db.Save(class).Error; err != nil {[m
[32m+[m		[32mreturn err[m
[32m+[m	[32m}[m
[32m+[m	[32mreturn nil[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc (r *classRepository) Delete(id int64) error {[m
[32m+[m	[32mif err := r.db.Delete(&entity.Class{}, id).Error; err != nil {[m
[32m+[m		[32mreturn err[m
[32m+[m	[32m}[m
[32m+[m	[32mreturn nil[m
[32m+[m[32m}[m
[1mdiff --git a/internal/api/repository/course_repository.go b/internal/api/repository/course_repository.go[m
[1mnew file mode 100644[m
[1mindex 0000000..72262cf[m
[1m--- /dev/null[m
[1m+++ b/internal/api/repository/course_repository.go[m
[36m@@ -0,0 +1,63 @@[m
[32m+[m[32mpackage repository[m
[32m+[m
[32m+[m[32mimport ([m
[32m+[m	[32m"errors"[m
[32m+[m	[32m"frs-planning-backend/internal/entity"[m
[32m+[m	[32m"gorm.io/gorm"[m
[32m+[m[32m)[m
[32m+[m
[32m+[m[32mtype CourseRepository interface {[m
[32m+[m	[32mCreate(course *entity.Course) error[m
[32m+[m	[32mFindAll() ([]entity.Course, error)[m
[32m+[m	[32mFindByID(id string) (*entity.Course, error)[m
[32m+[m	[32mUpdate(course *entity.Course) error[m
[32m+[m	[32mDelete(id string) error[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mtype courseRepository struct {[m
[32m+[m	[32mdb *gorm.DB[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc NewCourseRepository(db *gorm.DB) CourseRepository {[m
[32m+[m	[32mreturn &courseRepository{db: db}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc (r *courseRepository) Create(course *entity.Course) error {[m
[32m+[m	[32mif err := r.db.Create(course).Error; err != nil {[m
[32m+[m		[32mreturn err[m
[32m+[m	[32m}[m
[32m+[m	[32mreturn nil[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc (r *courseRepository) FindAll() ([]entity.Course, error) {[m
[32m+[m	[32mvar courses []entity.Course[m
[32m+[m	[32mif err := r.db.Find(&courses).Error; err != nil {[m
[32m+[m		[32mreturn nil, err[m
[32m+[m	[32m}[m
[32m+[m	[32mreturn courses, nil[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc (r *courseRepository) FindByID(id string) (*entity.Course, error) {[m
[32m+[m	[32mvar course entity.Course[m
[32m+[m	[32mif err := r.db.First(&course, "id = ?", id).Error; err != nil {[m
[32m+[m		[32mif errors.Is(err, gorm.ErrRecordNotFound) {[m
[32m+[m			[32mreturn nil, nil[m
[32m+[m		[32m}[m
[32m+[m		[32mreturn nil, err[m
[32m+[m	[32m}[m
[32m+[m	[32mreturn &course, nil[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc (r *courseRepository) Update(course *entity.Course) error {[m
[32m+[m	[32mif err := r.db.Save(course).Error; err != nil {[m
[32m+[m		[32mreturn err[m
[32m+[m	[32m}[m
[32m+[m	[32mreturn nil[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc (r *courseRepository) Delete(id string) error {[m
[32m+[m	[32mif err := r.db.Delete(&entity.Course{}, "id = ?", id).Error; err != nil {[m
[32m+[m		[32mreturn err[m
[32m+[m	[32m}[m
[32m+[m	[32mreturn nil[m
[32m+[m[32m}[m
[1mdiff --git a/internal/api/routes/class_route.go b/internal/api/routes/class_route.go[m
[1mnew file mode 100644[m
[1mindex 0000000..db3c4a7[m
[1m--- /dev/null[m
[1m+++ b/internal/api/routes/class_route.go[m
[36m@@ -0,0 +1,24 @@[m
[32m+[m[32mpackage routes[m
[32m+[m
[32m+[m[32mimport ([m
[32m+[m	[32m"frs-planning-backend/internal/api/controller"[m
[32m+[m	[32m"frs-planning-backend/internal/api/repository"[m
[32m+[m	[32m"frs-planning-backend/internal/api/service"[m
[32m+[m	[32m"github.com/gin-gonic/gin"[m
[32m+[m	[32m"gorm.io/gorm"[m
[32m+[m[32m)[m
[32m+[m
[32m+[m[32mfunc RegisterClassRoutes(router *gin.Engine, db *gorm.DB) {[m
[32m+[m	[32mclassRepo := repository.NewClassRepository(db)[m
[32m+[m	[32mclassService := service.NewClassService(classRepo)[m
[32m+[m	[32mclassController := controller.NewClassController(classService)[m
[32m+[m
[32m+[m	[32mclassRoutes := router.Group("/api/classes")[m
[32m+[m	[32m{[m
[32m+[m		[32mclassRoutes.POST("", classController.CreateClass)[m
[32m+[m		[32mclassRoutes.GET("", classController.GetAllClasses)[m
[32m+[m		[32mclassRoutes.GET("/:id", classController.GetClassByID)[m
[32m+[m		[32mclassRoutes.PUT("/:id", classController.UpdateClass)[m
[32m+[m		[32mclassRoutes.DELETE("/:id", classController.DeleteClass)[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/internal/api/routes/course_route.go b/internal/api/routes/course_route.go[m
[1mnew file mode 100644[m
[1mindex 0000000..ce8d01e[m
[1m--- /dev/null[m
[1m+++ b/internal/api/routes/course_route.go[m
[36m@@ -0,0 +1,24 @@[m
[32m+[m[32mpackage routes[m
[32m+[m
[32m+[m[32mimport ([m
[32m+[m	[32m"frs-planning-backend/internal/api/controller"[m
[32m+[m	[32m"frs-planning-backend/internal/api/repository"[m
[32m+[m	[32m"frs-planning-backend/internal/api/service"[m
[32m+[m	[32m"github.com/gin-gonic/gin"[m
[32m+[m	[32m"gorm.io/gorm"[m
[32m+[m[32m)[m
[32m+[m
[32m+[m[32mfunc RegisterCourseRoutes(router *gin.Engine, db *gorm.DB) {[m
[32m+[m	[32mcourseRepo := repository.NewCourseRepository(db)[m
[32m+[m	[32mcourseService := service.NewCourseService(courseRepo)[m
[32m+[m	[32mcourseController := controller.NewCourseController(courseService)[m
[32m+[m
[32m+[m	[32mcourseRoutes := router.Group("/api/courses")[m
[32m+[m	[32m{[m
[32m+[m		[32mcourseRoutes.POST("", courseController.CreateCourse)[m
[32m+[m		[32mcourseRoutes.GET("", courseController.GetAllCourses)[m
[32m+[m		[32mcourseRoutes.GET("/:id", courseController.GetCourseByID)[m
[32m+[m		[32mcourseRoutes.PUT("/:id", courseController.UpdateCourse)[m
[32m+[m		[32mcourseRoutes.DELETE("/:id", courseController.DeleteCourse)[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/internal/api/service/class_service.go b/internal/api/service/class_service.go[m
[1mnew file mode 100644[m
[1mindex 0000000..b7475ca[m
[1m--- /dev/null[m
[1m+++ b/internal/api/service/class_service.go[m
[36m@@ -0,0 +1,90 @@[m
[32m+[m[32mpackage service[m
[32m+[m
[32m+[m[32mimport ([m
[32m+[m	[32m"frs-planning-backend/internal/api/repository"[m
[32m+[m	[32m"frs-planning-backend/internal/dto"[m
[32m+[m	[32m"frs-planning-backend/internal/entity"[m
[32m+[m[32m)[m
[32m+[m
[32m+[m[32mtype ClassService interface {[m
[32m+[m	[32mCreateClass(req *dto.CreateClassRequest) error[m
[32m+[m	[32mGetAllClasses() ([]dto.ClassResponse, error)[m
[32m+[m	[32mGetClassByID(id int64) (*dto.ClassResponse, error)[m
[32m+[m	[32mUpdateClass(id int64, req *dto.UpdateClassRequest) error[m
[32m+[m	[32mDeleteClass(id int64) error[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mtype classService struct {[m
[32m+[m	[32mclassRepo repository.ClassRepository[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc NewClassService(classRepo repository.ClassRepository) ClassService {[m
[32m+[m	[32mreturn &classService{[m
[32m+[m		[32mclassRepo: classRepo,[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc (s *classService) CreateClass(req *dto.CreateClassRequest) error {[m
[32m+[m	[32mclass := &entity.Class{[m
[32m+[m		[32mLecturer:      req.Lecturer,[m
[32m+[m		[32mCourseID:      req.CourseID,[m
[32m+[m		[32mClassSchedule: req.ClassSchedule,[m
[32m+[m		[32mPriority:      req.Priority,[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mreturn s.classRepo.Create(class)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc (s *classService) GetAllClasses() ([]dto.ClassResponse, error) {[m
[32m+[m	[32mclasses, err := s.classRepo.FindAll()[m
[32m+[m	[32mif err != nil {[m
[32m+[m		[32mreturn nil, err[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mvar responses []dto.ClassResponse[m
[32m+[m	[32mfor _, class := range classes {[m
[32m+[m		[32mresponses = append(responses, dto.ClassResponse{[m
[32m+[m			[32mID:            class.ID,[m
[32m+[m			[32mLecturer:      class.Lecturer,[m
[32m+[m			[32mCourseID:      class.CourseID,[m
[32m+[m			[32mClassSchedule: class.ClassSchedule,[m
[32m+[m			[32mPriority:      class.Priority,[m
[32m+[m		[32m})[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mreturn responses, nil[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc (s *classService) GetClassByID(id int64) (*dto.ClassResponse, error) {[m
[32m+[m	[32mclass, err := s.classRepo.FindByID(id)[m
[32m+[m	[32mif err != nil {[m
[32m+[m		[32mreturn nil, err[m
[32m+[m	[32m}[m
[32m+[m	[32mif class == nil {[m
[32m+[m		[32mreturn nil, nil[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mreturn &dto.ClassResponse{[m
[32m+[m		[32mID:            class.ID,[m
[32m+[m		[32mLecturer:      class.Lecturer,[m
[32m+[m		[32mCourseID:      class.CourseID,[m
[32m+[m		[32mClassSchedule: class.ClassSchedule,[m
[32m+[m		[32mPriority:      class.Priority,[m
[32m+[m	[32m}, nil[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc (s